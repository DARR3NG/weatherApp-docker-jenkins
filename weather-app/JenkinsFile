pipeline {
    agent any
    tools {
        maven 'maven'
    }
    
    stages {
        stage('Git Clone') {
            steps {
                script {
                      checkout([$class: 'GitSCM', branches: [[name: 'main']], userRemoteConfigs: [[url: 'https://github.com/DARR3NG/weatherApp-docker-jenkins.git']]])
    
                }
            }
        }

stage('Build Discovery-Service') {
    steps {
    script{
        dir('weather-app/discovery-service') {

            withSonarQubeEnv('sonarserver') {
                bat "mvn clean verify sonar:sonar -Dsonar.projectKey=discovery-service -Dsonar.projectName='discovery-service'"
            }
                    timeout(time:1, unit:'HOURS'){
                    def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Quality Gate did not pass. Check the SonarQube dashboard for details."
                        }
                    }
                    bat 'mvn clean install'
                }
    }
    }
}

        stage('Build Config-Service') {
            steps {
                dir('weather-app/config-service'){

                bat 'mvn clean install'
                }
            }
        }
        stage('Build gateway-service') {
            steps {
                dir('weather-app/gateway-service'){

                bat 'mvn clean install'
                }
            }
        }


        stage('Build geocoder-service') {
            steps {
            script{
                dir('weather-app/geocoder-service'){

                withSonarQubeEnv('sonarserver') {
                    bat "mvn clean verify sonar:sonar -Dsonar.projectKey=geocoder-service -Dsonar.projectName='geocoder-service'"
                }

                timeout(time:1, unit:'HOURS'){
                    def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Quality Gate did not pass. Check the SonarQube dashboard for details."
                        }
                }

                bat 'mvn clean install'
                }
                }
            }
        }
        stage('Build weather-service') {
            steps {
            script{
                dir('weather-app/weather-service'){

                    withSonarQubeEnv('sonarserver') {
                        bat "mvn clean verify sonar:sonar -Dsonar.projectKey=weather-service -Dsonar.projectName='weather-service'"
                    }
                    timeout(time:1, unit:'HOURS'){
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Quality Gate did not pass. Check the SonarQube dashboard for details."
                        }
                    }

                bat 'mvn clean install'
                }}
            }
        }
        stage('Build weather-forecast-service') {
            steps {
            script{
                dir('weather-app/weather-forecast'){

                withSonarQubeEnv('sonarserver') {
                    bat "mvn clean verify sonar:sonar -Dsonar.projectKey=weather-forecast -Dsonar.projectName='weather-forecast'"
                }
                timeout(time:1, unit:'HOURS'){
                    def qg = waitForQualityGate()
                    if (qg.status != 'OK') {
                        error "Quality Gate did not pass. Check the SonarQube dashboard for details.."
                    }
                }

                bat 'mvn clean install'
                }
                }
            }
        }

        stage('Build Weather ui') {
                    steps {
                    dir('weather-app/weather_app_front'){
                        bat 'npm install'
                }
            }
        }


        stage('Compose and Build Docker Images') {
            steps {
                dir('weather-app'){

                bat 'docker compose up --build -d'
                }
            }
        }

        stage('Expose Microservices with Ngrok') {
            steps {
                dir('weather-app') {
                    script {
                        // Exécuter Ngrok pour chaque service (ajuster les ports en conséquence)

                        bat 'ngrok http 3000 '

                        // Ajoutez des commandes Ngrok supplémentaires pour chaque microservice que vous souhaitez exposer
                        // ...

                        // Attendre un certain temps pour que Ngrok puisse initialiser les tunnels (ajustez selon vos besoins)
                        sleep 10
                    }
                }
            }
        }


    }
}
